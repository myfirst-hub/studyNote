
    Redux 的设计思想
1.Web 应用是一个状态机，视图与状态是一一对应的。
2.所有的状态，保存在一个对象里面。

     Redux 的基本概念
Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。
Store对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照（方法store.getState()）。这种时点的数据集合，
就叫做 State。
Action 描述当前发生的事情。
改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store。
Action 就是 View 发出的通知，表示 State 应该要发生变化了。
.dispatch方法会触发 Reducer 的自动执行
Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。
Reducer 函数最重要的特征是，它是一个纯函数（只要是同样的输入，必定得到同样的输出）。
Store 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。

function createStore(reducer) {
            var state;
            var listeners = [];
            var getState = () => state;
            var dispatch = (action) => {
                state = reducer(state, action);
                listeners.forEach(l=>l());
            }
            var subscribe = (listener) => {
                listeners.push(listener);
                return () => {
                    listeners = listeners.filter((l) => l != listener)
                }
            }
            dispatch();
            return {
                getState, dispatch, subscribe
            }
        }
        var reducer = (state = 0, action) => {
            if (!action) return state;
            console.log(action);
            switch (action.type) {
                case 'INCREMENT':
                    return state + 1;
                case 'DECREMENT':
                    return state - 1;
                default:
                    return state;
            }
        }
        var store = createStore(reducer);
        store.subscribe(function () {
            document.querySelector('#counter').innerHTML = store.getState();
        });

React-Redux 提供connect方法，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来。
相对于UI 组件而言：
（1）输入逻辑：外部的数据（即state对象）如何转换为 UI 组件的参数（mapStateToProps）
（2）输出逻辑：用户发出的动作如何变为 Action 对象，从 UI 组件传出去。（ mapDispatchToProps）

React-Redux 提供Provider组件，可以让容器组件拿到state。 Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了。
避免容器组件可能在很深的层级，一级级将state传下去就很麻烦。

