    webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地
构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。

    入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。

    output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。
    webpack打包工程，通常会需要分离第三方类库和应用本身的代码:

    loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。

    webpack 的配置中 loader 有两个目标：
（1）test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。
（2）use 属性，表示进行转换时，应该使用哪个 loader。
 
    插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。
使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。    

    通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个优化过的，会以正确顺序执行的
bundle。

     package.json就是管理你本地安装的npm包；包括当前项目的依赖模块，自定义的脚本任务等等
展示项目所依赖的npm包 
允许你指定一个包的版本[范围] 
让你建立起稳定，意味着你可以更好的与其他开发者共享

      webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似
@import 和 url(...)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够
把样式表嵌入webpack打包后的JS文件中



     loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件（Plugins）并不直接操作单
个文件，它直接对整个构建过程其作用。

    “源”代码(/src)从我们的“分发”代码(/dist)（bundle）中分离出来。“源”代码是用于书写和编辑的代码。“分发”
代码是构建过程产生的代码最小化和优化后的“输出”目录。