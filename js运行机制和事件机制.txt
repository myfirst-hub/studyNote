https://www.cnblogs.com/mcray/p/6938417.html
js运行机制:
一、JavaScript是单线程，避免DOM节点在不同线程上同时进行添加删除操作，造成混乱。

二、任务队列
JavaScript的任务分为两种，在主线程上执行的任务"同步任务"，被主线程挂载起来的任务"异步任务",后者一般是放在一个叫任务队列的数据结构中。
一般异步执行运行机制如下(也是JavaScript的运行机制)：
(1)所有同步任务都在主线程上执行，形成一个执行栈。
(2)主线程之外，还有一个“任务队列”,只要异步任务有了运行结果，就在“任务队列”之中放置一个事件。
(3)一旦“执行栈”中的所有同步任务执行完毕了，系统就会读取“任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，
开始执行。
(4)主线程不断重复上面的三步。（事件循环）

三、异步任务：（执行顺序是先进先出）setTimeout和setlnterval DOM事件  ES6中的Promise  Ajax异步请求
1.事件和回调函数
事件。其实任务队列就是一个事件队列，因为一般我们绑定一个事件，比如点击事件等等，都是在某一个时刻才触发执行的，这个时候就得放到任务队列里面，
等待执行，而在某个DOM节点上绑定了事件，就要有相应的回调函数,它们是相辅相成的。
所谓回调函数，就是那些被挂载起来，等待执行的代码，主线程执行任务队列里面的异步任务，其实就是执行这些回调函数。

2.定时器 	
定时器主要由setTimeout()和setInterval()两个函数来完成，它们的内部运行机制完全一样，不同的只是，前者一次性执行，而后者反复执行

https://segmentfault.com/a/1190000011951192?utm_source=tag-newest
DOM事件机制:
DOM事件流:
“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。

事件处理程序（或事件侦听器）就是响应某个事件的函数:
HTML事件处理程序:<div onclick="alert('Clicked')">Click</div>
DOM0级事件处理程序:document.getElementById("#btn").onclick = function() {console.log("hello");}删除通过DOM0级方法指定的事件处理程序：btn.onclick = null;
DOM2级事件处理程序:document.getElementById("btn").addEventListener("click", function () {console.log(this.id);});
DOM2级IE事件处理程序attachEvent()添加事件detachEvent()删除事件
大多数情况下，都是将事件处理程序添加到事件流的冒泡阶段，这样就可以最大限度地兼容各种浏览器。

事件代理(即事件委托)的原理用到的就是事件冒泡和目标元素，把事件处理器添加到父元素，等待子元素事件冒泡，并且父元素能够通过target（IE为srcElement）判断是哪个
子元素，从而做相应处理
事件代理的好处：
将多个事件处理器减少到一个，因为事件处理器要驻留内存，这样就提高了性能。
DOM更新无需重新绑定事件处理器，因为事件代理对不同子元素可采用不同处理方法。

https://segmentfault.com/a/1190000004560734
DOM中的事件（event）对象：
type:获取事件类型
target：事件目标
stopPropagation() 阻止事件冒泡
preventDefault() 阻止事件的默认行为

https://www.jianshu.com/p/de7aba994523
浏览器内核是多线程,Javascript是单线程。
浏览器内核的是一个多线程处理，它主要包含如下几个线程：
GUI渲染线程： 渲染页面的html元素
JavaScript引擎线程： 页面的交互和dom渲染
定时触发器线程：一定时间后，来触发对应的线程
事件触发线程：当一个事件触发该线程的时候，就会把它放到js的事件队列中等待执行。常用于异步操作。
异步http线程： 在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到
JavaScript引擎的处理队列中等待处理。
不同线程间的联系：
JavaScript引擎和GUI引擎互斥，不能一边操作dom一边渲染页面
JavaScript引擎是单线程，所有需要按照事件处理队列来处理相应的代码。
JavaScript引擎有一个监听事件（monitoring process）的功能，会持续不断的检查js引擎的主线程执行栈是否为空，如果为空就会去取事件触发线程存放在事件
队列中的回调函数执行。

https://www.jianshu.com/p/c3716bedfaae
事件循环机制EventLoop：

