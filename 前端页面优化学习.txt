1、减少http请求，合理设置 HTTP缓存；
2、使用浏览器缓存：通过设置http头中的cache-control和expires的属性，可设定浏览器缓存，缓存时间可以是数天，甚至是几
个月。
3、启用压缩
4、CSS Sprites
（1）将用到的背景图片压缩为zip格式的压缩包
（2）用Css图片拼合生成器将其拼合成一张图片，然后下载该图片
（3）拼合完成后会生成相应的Css规则，该文件定位了每个图片的位置及图片的宽度和高度
（4）在Css样式中定位背景图片
（5）需要repeat的图片不适合放在sprite中
5、LazyLoad Images：在页面刚加载的时候可以只加载第一屏，当用户继续往后滚屏的时候才加载后续的图片。
6、CSS放在页面最上部，javascript放在页面最下面
7、预解析DNS
<meta http-equit="x-dns-prefetch-control" control="on">
<link rel="dns-prefetch" href="//host_name_to_prefetch.com">
8、使用CDN
9、非核心代码使用异步加载：
分类  ： 动态加载脚本     defer   async
区别：   defer是在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行
             async是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关。

10. Ajax请求使用缓存：
在进行Ajax请求的时候，可以选择尽量使用get方法，这样可以使用客户端的缓存，提高请求速度。 
POST的请求，是不可以在客户端缓存的，每次请求都需要发送给服务器进行处理，每次都会返回状态码200。
（可以在服务器端对数据进行缓存，以便提高处理速度）
GET的请求，是可以（而且默认）在客户端进行缓存的，除非指定了不同的地址，否则同一个地址的AJAX请求，
不会重复在服务器执行，而是返回304。




浏览器请求流程：


http缓存机制：
报文信息主要分为两部分
    1.包含属性的首部(header)--------------------------附加信息（cookie，缓存信息等）与缓存相关的规则信息，均包含在
header中
    2.包含数据的主体部分(body)-----------------------HTTP请求真正想要传输的部分
缓存规则：
    强制缓存：有缓存数据且未失效，直接把缓存数据返回客户端
    对比缓存：先获取缓存数据标识，再请求服务器若是有缓存且未失效，则把缓存数据返回客户端
    强制缓存优先级高于对比缓存
请求与响应header中标明失效规则：
Expires:（Expires 是HTTP 1.0的东西）
    Expires的值为服务端返回的到期时间
Cache-Control:是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。（Cache-
Control 是HTTP 1.1的东西,现在默认浏览器均默认使用HTTP 1.1）
    private:             客户端可以缓存
    public:              客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）
    max-age=xxx:   缓存的内容将在 xxx 秒后失效
    no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）
    no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发
Last-Modified  /  If-Modified-Since
     Last-Modified服务器在响应请求时，告诉浏览器资源的最后修改时间。     
     If-Modified-Since：再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。
     服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。
     若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；
     若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的
cache。
Etag  /  If-None-Match（优先级高于Last-Modified  /  If-Modified-Since）
     Etag是服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识
     If-None-Match：再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。
     服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，
     不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；
     相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。
总结
对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。
对于比较缓存，将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使
用缓存。