Set
	它类似于数组，但是成员的值都是唯一的，没有重复的值。

Set 实例的属性和方法
	Set.prototype.constructor：构造函数，默认就是Set函数。
	Set.prototype.size：返回Set实例的成员总数。
	Set.prototype.add(value)：添加某个值，返回 Set 结构本身。
	Set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
	Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。
	Set.prototype.clear()：清除所有成员，没有返回值。

Array.from方法可以将 Set 结构转为数组。

Set 结构的实例有四个遍历方法:
	Set.prototype.keys()：返回键名的遍历器
	Set.prototype.values()：返回键值的遍历器
	Set.prototype.entries()：返回键值对的遍历器
以上三个方法返回的都是遍历器对象
	Set.prototype.forEach()：使用回调函数遍历每个成员

WeakSet 结构与 Set 类似，也是不重复的值的集合。它与 Set 有两个区别。它是一个构造函数，可以使用new命令。
	首先，WeakSet 的成员只能是对象，而不能是其他类型的值。
	其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动
回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。

Map
	JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。map的“键”的范围不限于字符串，各种类型的值（包括
对象）都可以当作键。
Map 结构的实例有以下属性和操作方法：
	size属性返回 Map 结构的成员总数。
	Map.prototype.set(key, value)       set方法设置键名key对应的键值为value，然后返回整个 Map 结构。
	Map.prototype.get(key)          get方法读取key对应的键值，如果找不到key，返回undefined。
	Map.prototype.has(key)           has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。
	Map.prototype.delete(key)         delete方法删除某个键，返回true。如果删除失败，返回false。
	Map.prototype.clear()	clear方法清除所有成员，没有返回值。





Iterator含义：
	它是一种接口，为各种不同的数据结构（数组（Array）和对象（Object），Map和Set四种数据集合）提供统一的访问机制。任何数据结构只要部署 Iterator 接口，
就可以完成遍历操作（即依次处理该数据结构的所有成员）。
Iterator 的作用：
	一是为各种数据结构，提供一个统一的、简便的访问接口；
	二是使得数据结构的成员能够按某种次序排列；
	三是 ES6 创造了一种新的遍历命令for...of循环，Iterator 接口主要供for...of消费。

var it = makeIterator(['a', 'b']);

it.next() // { value: "a", done: false }
it.next() // { value: "b", done: false }
it.next() // { value: undefined, done: true }

function makeIterator(array) {
  var nextIndex = 0;
  return {
    next: function() {
      return nextIndex < array.length ?
        {value: array[nextIndex++], done: false} :
        {value: undefined, done: true};
    }
  };
}
makeIterator函数，它是一个遍历器生成函数，作用就是返回一个遍历器对象。




Promise含义：
	Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。
两个特点：
	1.对象的状态不受外界影响。
	2.一旦状态改变，就不会再变，任何时候都可以得到这个结果（resolved（已定型））。
三种状态：
	pending（进行中）、fulfilled（已成功）和rejected（已失败）
缺点：
	一旦新建它就会立即执行，无法中途取消
	如果不设置回调函数，Promise内部抛出的错误，不会反应到外部
	当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）


Promise对象是一个构造函数，用来生成Promise实例。
	function timeout(ms) {
 	    return new Promise((resolve, reject) => {
    	    setTimeout(resolve, ms, 'done');
 	   });
	}

	   timeout(100).then((value) => {
 	      console.log(value);
	  });

封装Ajax例子：
const getJSON = function(url) {
  const promise = new Promise(function(resolve, reject){
    const handler = function() {
      if (this.readyState !== 4) {
        return;
      }
      if (this.status === 200) {
        resolve(this.response);
      } else {
        reject(new Error(this.statusText));
      }
    };
    const client = new XMLHttpRequest();
    client.open("GET", url);
    client.onreadystatechange = handler;
    client.responseType = "json";
    client.setRequestHeader("Accept", "application/json");
    client.send();

  });

  return promise;
};

getJSON("/posts.json").then(function(json) {
  console.log('Contents: ' + json);
}, function(error) {
  console.error('出错了', error);
});

异步加载图片的例子：
function loadImageAsync(url) {
  return new Promise(function(resolve, reject) {
    const image = new Image();

    image.onload = function() {
      resolve(image);
    };

    image.onerror = function() {
      reject(new Error('Could not load image at ' + url));
    };

    image.src = url;
  });
}

Promise.prototype.then()
	then方法是定义在Promise原型对象，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。
Promise.prototype.catch
	是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。
Promise.prototype.finally()
	用于指定不管 Promise 对象最后状态如何，都会执行的操作。



generator函数
Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个
遍历器对象生成函数。
Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。
Generator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。

ES6 诞生以前，异步编程的方法，大概有下面四种。
回调函数
事件监听
发布/订阅  setTimeOut
Promise 对象
Generator 函数将 JavaScript 异步编程带入了一个全新的阶段。

Promise 对象它不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成链式调用。


