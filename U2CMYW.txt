单页面应用特征：
1. 所有内容都在前端生成
2. JS承担更多的业务逻辑，后端只提供API
3. 页面跳转不需要经过后端
常用类库：
react vue angular backbone
架构工具：
npm bower jspm
模块化工具：
webpack  browserify  rollup

多页面应用特征：
1. 内容都由服务端用模板生成
2. 每次页面跳转都要经过服务端
3. JS更多只是做做动画
常用类库：
Jquery  
架构工具：
grunt glup
模块工具：
sea.js   requried.js

工程架构：
1. 解放生产力：
01 源代码预处理
02 自动打包，自动更新页面显示
03 自动处理图片依赖，保证开发和正式环境的统一
2. 围绕解决方案搭建环境
01 不同的前端框架需要不同的运行的架构
02 预期可能出现的问题并规避
3. 保证项目质量
01 code lint
02 不同环境排除差异
03 git commit 预处理

项目架构：
1. 技术选型
2. 数据解决方案
3. 整体代码风格

web开发常用网络优化
优化方法：
1. 合并资源文件，减少HTTP请求
2. 压缩资源文件减少请求大小
3. 利用缓存机制，尽可能使用缓存减少请求

webpack
一个为现在js应用诞生的模块打包器。但其实webpack不仅仅用来打包js，css，图片，字体，甚至是你自己发明的东西你都可以用webpack来打包。

为什么会有服务端渲染
单页面应用存在的问题：
1. SEO不友好
2. 首次请求等待时间较长，体验不好

react中如何使用服务端渲染：
react-dom是react专门为web端开发的渲染工具。我们可以在客户端使用react-dom的render方法渲染组件，而在服务端，react-dom/server提供我们将react组件
渲染成HTML的方法。

项目开发时的常用配置
常用配置：
webpack dev server
hot module replacement

eslint:
随着ESMAScript版本一直更新的Jslint工具，插件丰富，并且能够满足套用规范，规则非常丰富，能够满足大部分团队的需求。
为了最大程度控制每个人的规范，我们可以在git commit 代码的时候，使用git hook调用eslint及进行代码规范验证，不规范的代码无法提交到仓库。

editorconfig:
不同编译器对文本的格式会有一定的区别，如果不统一一些规范，可能你跟别人合作的时候每次更新下来别人的代码就会一大堆报错。

