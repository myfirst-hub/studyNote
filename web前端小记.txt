定义：
DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。
<!DOCTYPE html>作用：
声明文档的解析类型(document.compatMode)，避免浏览器的怪异模式。
BackCompat：怪异模式，浏览器使用自己的怪异模式解析渲染页面。
CSS1Compat：标准模式，浏览器使用W3C的标准解析渲染页面。
这个属性会被浏览器识别并使用，但是如果你的页面没有DOCTYPE的声明，那么compatMode默认就是BackCompat，
浏览器按照自己的方式解析渲染页面，那么，在不同的浏览器就会显示不同的样式。
如果你的页面添加了<!DOCTYPE html>那么，那么就等同于开启了标准模式
那么浏览器就得老老实实的按照W3C的标准解析渲染页面，这样一来，你的页面在所有的浏览器里显示的就都是一个样子了。

“use strict” 严格模式主要作用：
1.消除版本javascript中一些不合理及不严谨之处，减少怪异行为
2.提高编译效率，提高运行速度
3.为新版本的javasript做铺垫兼容
语法与行为变更：
全局变量的显示声明
创设eval的作用域
禁止使用with语句
禁止this执行全局对象，默认指向undefined
重名错误（函数参数重名&&对象重名属性）
只允许在全局作用域或函数作用域的顶层声明函数

<meta name="viewport" content="width=device-width,initial-scale=1.0">解释：
viewport详解：
浏览器默认的viewport叫做 layout viewport，这个layout viewport的宽度可以通过document.documentElement.clientWidth 来获取；
viewport来代表浏览器可视区域的大小叫做 visual viewport，可以通过window.innerWidth 来获取；layout viewport 的宽度是大于浏览器可视区域的宽度的
移动设备的理想viewport叫做 ideal viewport，即理想的情况是14px的文字无论是在何种密度屏幕，何种分辨率下，显示出来的大小都是差不多的；
content属性值详解：
width	设置layout viewport  的宽度，为一个正整数，或字符串"width-device"
initial-scale	设置页面的初始缩放值，为一个数字，可以带小数，当前缩放值 = ideal viewport宽度  / visual viewport宽度
minimum-scale	允许用户的最小缩放值，为一个数字，可以带小数
maximum-scale	允许用户的最大缩放值，为一个数字，可以带小数
height	设置layout viewport  的高度，这个属性对我们并不重要，很少使用
user-scalable	是否允许用户进行缩放，值为"no"或"yes", no 代表不允许，yes代表允许

在 ECMAScript 中，所有对象并非同等创建的。一般来说，可以创建并使用的对象有三种：本地对象、内置对象和宿主对象。
本地对象就是 ECMA-262 定义的类（引用类型）。它们包括：
Object
Function
Array
String
Boolean
Number
Date
RegExp
Error
EvalError
RangeError
ReferenceError
SyntaxError
TypeError
URIError

内置对象 
Global 和 Math

宿主对象
所有非本地对象都是宿主对象（host object），即由 ECMAScript 实现的宿主环境提供的对象。
所有 BOM 和 DOM 对象都是宿主对象。

所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。

Promise对象有以下两个特点：
  （1）对象的状态不受外界影响。
  （2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。

ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。
export命令用于规定模块的对外接口。
export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。
export命令可以出现在模块的任何位置，只要处于模块顶层就可以。
export default命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此export default命令只能使用一次，
所以，import命令后面才不用加大括号，因为只可能唯一对应export default命令。
import语句会执行所加载的模块。
import命令用于输入其他模块提供的功能。
import命令具有提升效果，会提升到整个模块的头部，首先执行。

ES6 模块与 CommonJS 模块的差异：
   CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外
接口只是一种静态定义，在代码静态解析阶段就会生成。

import()返回一个 Promise 对象。
import()函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。它是运行时执行，也就是说，什么时候运行到这一
句，就会加载指定的模块。
import()函数与所加载的模块没有静态连接关系，这点也是与import语句不相同。
import()类似于 Node 的require方法，区别主要是前者是异步加载，后者是同步加载。

<script>标签添加defer或async属性，脚本就会异步加载。defer要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，
以及其他脚本执行完成），才会执行；async一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。

首先 javascript 是一种弱类型、动态的、解释型的脚本语言。
弱类型：类型检查不严格，偏向于容忍隐式类型转换。 
强类型：类型检查严格，偏向于不容忍隐式类型转换。 
动态类型：运行的时候执行类型检查。 
静态类型：编译的时候就知道每个变量的类型。 
解释型：程序不需要编译，程序在运行的时候才翻译成机器语言，每执行一次都要翻译一次，因此效率比较低，但是跨平台性好。 
编译型：程序在执行之前需要一个专门的翻译过程，把程序编译为机器语言的文件，运行时直接使用编译的结果就行了。 
标记语言：标记语言的存在就是用来被读取(浏览)的，而其本身是没有行为能力的，在标记语言里你会看到<和>这些尖括号，这是
用来写出“层次”和”属性”的，换句话说，它是被动的。并不具备与访问者互动的能力。 
编程语言：它是具有逻辑性和行为能力，这是主动的。说通俗一点，它是有思想的。
脚本语言：它介于标记语言和编程语言之间，脚本语言不需要编译，可以直接用，由解释器来负责解释。

变量提升：函数声明和变量声明总是会被解释器悄悄地被"提升"到方法体的最顶部。
JavaScript 只有声明的变量会提升，初始化的不会。
变量提升只提升函数名 而函数提升会提升整个函数题 注意：函数提升在变量提升上面。

顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象。

ES6规定：
var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变
量，不属于顶层对象的属性。

ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。
事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。
{}本身就不具备 Iterator 接口
null，undefined，NaN，false，1（整数）转为对象以后不具备 Iterator 接口

手机键盘 确认按钮 事件 监听 绑定（web移动端）
<form action="#">或者<form action>都可以
<form action="#"> <input type="text" /> </form>
$('form').on('submit', function(e){
//阻止form提交默认事件,可以阻止提交后页面进行跳转
e.preventDefault();
  ... // 你想做的事
  return false;
});